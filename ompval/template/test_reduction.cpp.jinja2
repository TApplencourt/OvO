#include <stdlib.h>
#include <numeric>
#include <math.h>
#include <cassert>
#include <iostream>
#include <cmath>

void test_{{name}}(){

    {% if l_size|length > 0 %}
    // Declare Size of array
    {% for name, value in zip(l_LMN, l_size) %}
    const int {{ name }} = {{value}};
    {%- endfor %}
    {% endif %}

    // Initialize array
    int A = 0;

    // Computation
    {%- for structured_block, ((loop_pragma,level_loop), i, N) in l_pragma %}
      {%- for pragma, level in structured_block -%}
        {{ "\n" }}{% print(indent_gen(level)) -%}
        #pragma omp {{pragma}} {% if can_reduce(pragma) %} reduction(+:A) {%endif %} {% if is_target(pragma) %} defaultmap(tofrom:scalar) {% endif -%}
        {{ "\n" }}{% print(indent_gen(level)) -%}
        {
      {%- endfor -%}

      {%- if loop_pragma -%}
        {{ "\n" }}{% print(indent_gen(level_loop)) -%}
        #pragma omp {{loop_pragma}} {% if can_reduce(loop_pragma) %} reduction(+:A) {% endif %} {% if is_target(loop_pragma) %} defaultmap(tofrom:scalar) {% endif -%}
        {{ "\n" }}{% print(indent_gen(level_loop)) -%}
        for (int {{i}} = 0 ; {{i}} < {{N}} ; {{i}}++ )
        {% print(indent_gen(level_loop)) -%}
        {
      {%- endif -%}
    {%- endfor -%}
    {{ "\n" }}{% print(indent_gen(max_level)) -%}
    A=A+1;
    {%- for structured_block, ((loop_pragma,level_loop), i, N) in l_pragma -%}
        {%- for pragma, level in structured_block %}
          {{ "\n" }}{% print(indent_gen(max_level-level)) -%}
          }
        {%- endfor -%}
        {%- if loop_pragma -%}
        {{ "\n" }}{% print(indent_gen(max_level-level_loop)) -%}
        }
        {%- endif -%}
    {%- endfor %}

    // Validation
    {%- if fair %}
    assert( A == {{l_LMN|join("*")}} );
    {% else %}
    assert( A >= 0 );
    {% endif %}
    std::cout << "OK" << std::endl ;
}   

int main()
{
    test_{{name}}();
}

