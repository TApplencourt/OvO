#include <stdlib.h>
#include <numeric>
#include <math.h>
#include <cassert>
#include <iostream>
#include <cmath>

void test_{{name}}(){

    {% if l_size|length > 0 %}
    // Declare Size of array
    {% for name, value in zip(l_LMN, l_size) %}
    const int {{ name }} = {{value}};
    {% endfor -%}
    {% endif %}

    // Initialize array
    double A{{array_mapping(l_LMN,True)}};
    double B{{array_mapping(l_LMN,True)}} = { {{array_init_value(l_size)}} };

    // Computation
    {%- for structured_block, ((loop_pragma,level_loop), i, N) in l_pragma %}
      {%- for pragma, level in structured_block -%}
        {{ "\n" }}{% print(indent_gen(level)) -%}
        #pragma omp {{pragma}} {% if is_target(pragma) %} map(from: A{{array_mapping(l_LMN)}}) map(to: B{{array_mapping(l_LMN)}}) {% endif -%}
        {{ "\n" }}{% print(indent_gen(level)) -%}
        {
      {%- endfor -%}

      {%- if loop_pragma -%}
        {{ "\n" }}{% print(indent_gen(level_loop)) -%}
            #pragma omp {{loop_pragma}} {% if is_target(loop_pragma) %} map(from: A{{array_mapping(l_LMN)}}) map(to: B{{array_mapping(l_LMN)}}) {% endif -%}
        {{ "\n" }}{% print(indent_gen(level_loop)) -%}
            for (int {{i}} = 0 ; {{i}} < {{N}} ; {{i}}++ )
        {% print(indent_gen(level_loop)) -%}
        {
      {%- endif -%}
    {%- endfor -%}
    {{ "\n" }}{% print(indent_gen(max_level)) -%}
    A{{ array_mapping(l_ijk,True)}} = B{{array_mapping(l_ijk,True)}};


    {%- for structured_block, ((loop_pragma,level_loop), i, N) in l_pragma -%}
        {%- for pragma, level in structured_block %}
          {{ "\n" }}{% print(indent_gen(max_level-level)) -%}
          }
        {%- endfor -%}
        {%- if loop_pragma -%}
        {{ "\n" }}{% print(indent_gen(max_level-level_loop)) -%}
        }
        {%- endif -%}
    {%- endfor %}

    // Validation
    {%- for structured_block, ((loop_pragma,level_loop), i, N) in l_pragma %}
        {%- for pragma, level in structured_block -%}
        {{ "\n" }}{% print(indent_gen(level)) -%}
        {
        {%- endfor -%}
        {%- if loop_pragma -%}
        {{ "\n" }}{% print(indent_gen(level_loop)) -%}
        for (int {{i}} = 0 ; {{i}} < {{N}} ; {{i}}++ )
        {% print(indent_gen(level_loop)) -%}
        {
      {%- endif -%}
    {% endfor -%}
    {{ "\n" }}{% print(indent_gen(max_level)) -%}
    assert( std::fabs( A{{ array_mapping(l_ijk,True)}} - B{{array_mapping(l_ijk,True)}}) < 1E-9 );
    {%- for structured_block, ((loop_pragma,level_loop), i, N) in l_pragma -%}
        {%- for pragma, level in structured_block -%}
          {{ "\n" }}{% print(indent_gen(max_level-level)) -%}
          }
        {%- endfor -%}
        {%- if loop_pragma -%}
        {{ "\n" }}{% print(indent_gen(max_level-level_loop)) -%}
        }
        {%- endif -%}
    {%- endfor %}
    std::cout << "OK" << std::endl ;
}

int main()
{
    test_{{name}}();
}

