{% if have_complex %}
#include <complex>
{% endif %}
#include <cmath>
#include <iomanip> {# setprecision #}
#include <stdlib.h> {# atoi #}
#include <limits>
#include <iostream>
#include <cstdlib>
{% if size %}
#include <algorithm>
{% endif %}

using namespace std;

{% for output in l_argv | selectattr('is_output') | unique(attribute='T.without_pointer') %} 
   {% if not output.T.category in ("integer","bool") %}
bool almost_equal({{output.T.without_pointer}} x, {{output.T.without_pointer}} y, int ulp) {
      {% if output.T.category == "float" %}
     return std::fabs(x-y) <= std::numeric_limits<{{output.T.internal}}>::epsilon() * std::fabs(x+y) * ulp ||  std::fabs(x-y) < std::numeric_limits<{{output.T.internal}}>::min();
      {% elif output.T.category == "complex" %}
    return std::abs(x-y) <= std::numeric_limits<{{output.T.internal}}>::epsilon() * std::abs(x+y) * ulp ||  std::abs(x-y) < std::numeric_limits<{{output.T.internal}}>::min();
      {% endif %}
}
   {% endif %}
{% endfor %}

void test_{{name}}(){
{% if size %}
   const int PROB_SIZE = {{size}};
{% endif %}

   const char* usr_precision = getenv("OVO_TOL_ULP");
   const int precision =  usr_precision ? atoi(usr_precision) : 4;

{% for input in l_argv | selectattr('is_input')  %}
      {% if not size %}
   {{input.T}} {{input.name}} { {{input.val}} };
      {% else %}
   {{input.T}} {{input.name}}[PROB_SIZE];
   {% set is_cmplx = ( input.T.category == "complex") %}
   std::fill({{input.name}}, {{input.name}} + PROB_SIZE, {% if is_cmplx %} {{input.T}}( {% endif %} {{input.val}} {% if is_cmplx %} ) {% endif %} );
      {% endif %}
{% endfor %}

{% for output in l_argv | selectattr('is_output') %}
   {% if not size %}
   {% if not reciprocal %} {{output.T.without_pointer}} {{output.name_host}} {}; {% endif %} 
   {{output.T.without_pointer}} {{output.name_device}} {};
   {% else %}
   {% if not reciprocal %} {{output.T.without_pointer}} {{output.name_host}}[PROB_SIZE]; {% endif %}
   {{output.T.without_pointer}} {{output.name_device}}[PROB_SIZE];
   {% endif %}
{% endfor %}

{% if not reciprocal %}
  {%if size %}
   for (int i= 0;  i < PROB_SIZE ; i++) 
  {% endif %}
   {
    {%if scalar_output %}{{scalar_output.name_host_idx}} = {% endif %} {{name}}({{ l_argv | selectattr('is_argv') | join(', ',attribute='argv_host') }});
   }
{% endif %}
 
   #pragma omp target map(tofrom: {{ l_argv | selectattr('is_output') | join(', ', attribute='map_clause_from')  }} )  {%if size %} map(to: {{ l_argv | selectattr('is_input') | join(', ', attribute='map_clause_to')  }}) {%endif %} 
{%if size %}
   for (int i= 0;  i < PROB_SIZE; i++) 
{% endif %}
   {
    {%if scalar_output %}{{scalar_output.name_device_idx}} = {% endif %} {{name}}({{ l_argv | selectattr('is_argv') | join(', ',attribute='argv_device') }});
   }

{%if size %}
   for (int i= 0;  i < PROB_SIZE; i++) {
{% endif %}

{% if not reciprocal %}
{% for output in l_argv | selectattr('is_output')  %}
   {% if output.T.category in ("integer","bool")  %}
   if ( {{output.name_host_idx}} != {{output.name_device_idx}} ) {
   {% else %}
   if ( !almost_equal({{output.name_host_idx}},{{output.name_device_idx}}, precision) ) {
   {% endif %}
        std::cerr << std::setprecision (std::numeric_limits<{{output.T.internal}}>::max_digits10 ){% if size %} << "Idx: " << i << " " {% endif %} << "Host: " << {{output.name_host_idx}} << " GPU: " << {{output.name_device_idx}} << std::endl;
        {# https://tldp.org/LDP/abs/html/exitcodes.html, we choose 112 #}
        std::exit(112);
    }
{% endfor %}
{% else %}
   {% set output_f = (l_argv | selectattr('is_output') | first).name_device_idx %}
   {% set input = (l_argv | selectattr('is_argv') | first) %}
   if ( !almost_equal({{reciprocal}}({{output_f}}), {{input.argv_host}}, 2*precision) ) {
            std::cerr << std::setprecision (std::numeric_limits<{{input.T.internal}}>::max_digits10 ){% if size %} << "Idx: " << i << " " {% endif %} << "Expected:" << {{input.argv_host}} << " Got: "  << {{reciprocal}}({{output_f}}) << std::endl;
            std::exit(112);
   }
{% endif %}

{%if size %}
   }
{% endif %}
}

int main()
{
    test_{{name}}();
}

